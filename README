Train Operations Functions
Function: arrive_train

In the arrive_train function, we check if the given platform is greater than or equal to 0 and less than the maximum number of platforms. If these conditions are met, we verify if the locomotive power is different from -1, a value with which it was initialized and cannot be -1, and then set it to the desired value.
Function: leave_train

In the leave_train function, we check the existence conditions of the platform. Then, we set the locomotive value to -1 to prevent it from being displayed. Subsequently, we remove each wagon one by one if needed.
Function: add_train_car

The add_train_car function checks for the existence of the platform and whether the locomotive has a value different from -1 to connect the wagons to it. A new list node is created, and if the list is null, the new element is added to the list. If the list is not null, we move to the next list position and add the element.
Function: remove_train_cars

In the remove_train_cars function, we verify the existence of the platform and locomotive. We then perform a while loop to remove the first wagons with a weight equal to the given weight. Afterwards, another while loop checks if the weight of the next wagon is equal to the weight to be removed. If true, that wagon is removed.
Function: move_train_cars

In the move_train_cars function, we calculate the length of the list and verify the input conditions for the function. We check the existence of the list from which we want to move a sequence. Then, we determine if the starting position is 1 or greater. If it's 1, we traverse the number of elements to be moved and remove those wagons. If the starting position is greater than 1, we traverse the wagon sequence up to the point from where the wagons will be removed. We then traverse the number of wagons to be moved and remove them. We remember the address from where the move will occur. In the next sequence, we check if the list where we want to insert exists. If the number of wagons is 1, we check if the position is 1 or greater and then insert. If the number of wagons is more than 1, we check if the insertion position is 1. We traverse the move sequence for the number of wagons and attach them to the list where they should be inserted. If the insertion position is greater than 1, we traverse the sequence up to the insertion position and insert the wagon sequence. If the insert list is null, it is set to the wagon sequence.
Function: find_express_train

In the find_express_train function, we check if the station exists. We then calculate the weight of each wagon sequence for each platform. Afterward, we calculate the difference between the locomotive power and weight. We remember the platform where the difference is maximum.
Function: find_overload_train

In the find_overload_train function, we iterate through each platform, calculating the weight of each wagon sequence. We memorize the platform where the weight exceeds the power. If the platform is different from -1, we return that platform. If no overloaded train is found, -1 is returned.
Function: find_optimal_train

In the find_optimal_train function, we check if the station exists. We then iterate through each platform, calculating the weight of each wagon sequence. We calculate the difference between the locomotive power and weight and remember the platform where the difference is minimum. The function returns that platform.
Function: find_heaviest_sequence_train

In the find_heaviest_sequence_train function, we calculate the maximum sequence size. If the wagon sequence is larger than the number of cars, the function is interrupted. We then iterate through each platform and traverse the list with a while loop, moving one position forward after calculating the sum of weights for the specified number of cars. We remember the maximum weight and a pointer to the wagon from which the maximum weight sequence begins.
Function: order_train

In the order_train function, we calculate the length of the list. If the list length is 2, we check if the weight of the current wagon is less than the weight of the next wagon. If true, we swap them. If the list has a length greater than 2, we apply the bubble sort algorithm by traversing the list. When we encounter a situation where the weight of the current wagon is less than the weight of the next wagon, we swap the wagons.
Function: fix_overload_train

In the fix_overload_train function, we call the find_overload_train function to memorize the platform value. For the platform where overloading is detected, we calculate the weight of the wagon sequence and determine the weight to be eliminated. We then traverse the wagon list, and if a wagon with the weight to be eliminated is found, it is removed. If a wagon with the weight to be eliminated is not found, we increment the weight to be eliminated by 1 and repeat the search and removal.
